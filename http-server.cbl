IDENTIFICATION DIVISION.
PROGRAM-ID. HTTP-SERVER.
AUTHOR. Hippolyte Damay--Glorieux.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY. FUNCTION ALL INTRINSIC.

DATA DIVISION.
WORKING-STORAGE SECTION.

*> ERROR HANDLING
77 ABORT-MESSAGE PIC X(64).
77 ERRNO BINARY-CHAR UNSIGNED.
77 ERRNO-NAME PIC X(16).
77 ERRNO-MESSAGE PIC X(40).

*> COMMAND LINE
77 COMMAND-STRING PIC X(64).
77 COMMAND-IP-ADDRESS PIC X(15) VALUE SPACES.
77 COMMAND-PORT PIC 9(5).
77 COMMAND-BINARY-PORT BINARY-SHORT.

*> CONSTANTS
77 AF_INET BINARY-SHORT UNSIGNED VALUE 2.
77 SOCK_STREAM BINARY-SHORT UNSIGNED VALUE 1.
77 SOL_SOCKET BINARY-INT VALUE 1.
77 SO_REUSEADDR BINARY-INT VALUE 2.
77 YES BINARY-INT VALUE 1.
77 QUEUE-LENGTH BINARY-CHAR VALUE 2.

*> SERVER STATUS
01 SERVER-STATUS PIC 9 VALUE ZERO.
88 END-SERVER VALUE 1.

*> SERVER IDENTIFIER
77 SERVER-DESC BINARY-INT.
01 SERVER-ADDRESS.
   03 SERVER-FAMILY BINARY-SHORT UNSIGNED.
   03 SERVER-PORT BINARY-SHORT UNSIGNED.
   03 SERVER-IP-ADDRESS BINARY-INT UNSIGNED.
   03 FILLER PIC X(8) VALUE LOW-VALUES.

*> CLIENT IDENTIFIER
77 CLIENT-DESC BINARY-INT.
01 CLIENT-ADDRESS.
   03 CLIENT-FAMILY BINARY-SHORT UNSIGNED.
   03 CLIENT-PORT BINARY-SHORT UNSIGNED.
   03 CLIENT-IP-ADDRESS BINARY-INT UNSIGNED.
   03 FILLER PIC X(8) VALUE LOW-VALUES.
77 CLIENT-ADDRESS-LENGTH BINARY-SHORT UNSIGNED.

*> BUFFER
01 BUFFER PIC X(1024).
01 BUFFER-LENGTH BINARY-SHORT UNSIGNED.

*> REQUEST
01 REQUEST.
   03 REQUEST-TYPE PIC X(4).
   03 REQUEST-PATH PIC X(2048).
   03 REQUEST-PATH-LENGTH PIC 9(4).

*> RESOURCES
77 RESOURCES-FOLDER PIC X(1024) VALUE "http_resources".
01 RESOURCES.
   05 RESOURCES-SIZE PIC 99.
   05 RESOURCE OCCURS 20 TIMES.
       10 RESOURCE-NAME PIC X(1024).
       10 RESOURCE-PATH PIC X(1024).
       10 RESOURCE-TYPE PIC X(1024).

PROCEDURE DIVISION.
INIT-HTTP.
    DISPLAY "Server initialisation".
    ACCEPT COMMAND-STRING FROM COMMAND-LINE.
	UNSTRING COMMAND-STRING DELIMITED BY ALL SPACES INTO COMMAND-IP-ADDRESS COMMAND-PORT.
    DISPLAY "IP Address: " COMMAND-IP-ADDRESS.
    DISPLAY "Port: " COMMAND-PORT.

	CALL 'socket' USING
	 BY VALUE AF_INET
	 BY VALUE SOCK_STREAM
	 BY VALUE 0
	 GIVING SERVER-DESC
	END-CALL.
	IF RETURN-CODE IS EQUAL -1 THEN
	 MOVE "Server call 'socket' failed" TO ABORT-MESSAGE
     PERFORM ABORT-SERVER
	END-IF.

	CALL 'setsockopt' USING
	 BY VALUE SERVER-DESC
	 BY VALUE SOL_SOCKET
	 BY VALUE SO_REUSEADDR
	 BY REFERENCE YES
	 BY VALUE LENGTH(YES)
	END-CALL.
	IF RETURN-CODE IS EQUAL -1 THEN
	 MOVE "Server call 'setsockopt' failed" TO ABORT-MESSAGE
     PERFORM ABORT-SERVER
	END-IF.

	MOVE COMMAND-PORT TO  COMMAND-BINARY-PORT.

	CALL 'htons' USING
	 BY VALUE COMMAND-BINARY-PORT
	 GIVING SERVER-PORT
	END-CALL.

	MOVE AF_INET TO SERVER-FAMILY.

	IF COMMAND-IP-ADDRESS IS EQUAL "localhost" OR "INADDR_ANY" THEN
	 MOVE 0 TO SERVER-IP-ADDRESS
	ELSE
	   CALL 'inet_addr' USING
	   	BY REFERENCE COMMAND-IP-ADDRESS
		GIVING SERVER-IP-ADDRESS
	   END-CALL
	END-IF.
	
	CALL 'bind' USING
	     BY VALUE SERVER-DESC
	     BY REFERENCE SERVER-ADDRESS
	     BY VALUE LENGTH(SERVER-ADDRESS)
	END-CALL.
	IF RETURN-CODE IS EQUAL -1 THEN
	   MOVE "Server call 'bind' failed" TO ABORT-MESSAGE
	   PERFORM ABORT-SERVER
	END-IF.

	CALL 'listen' USING
	 BY VALUE SERVER-DESC
	 BY VALUE QUEUE-LENGTH
	END-CALL.
	IF RETURN-CODE IS EQUAL -1 THEN
	 MOVE "Server call 'listen' failed" TO ABORT-MESSAGE
     PERFORM ABORT-SERVER
	END-IF.

RUN-HTTP.
	MOVE LENGTH(CLIENT-ADDRESS) TO CLIENT-ADDRESS-LENGTH.
	PERFORM UNTIL END-SERVER
     CALL 'accept' USING
         BY VALUE SERVER-DESC
         BY REFERENCE CLIENT-ADDRESS
		 BY REFERENCE CLIENT-ADDRESS-LENGTH
		 GIVING CLIENT-DESC
     END-CALL
     IF RETURN-CODE IS EQUAL -1 THEN
		 MOVE "Server call 'accept' failed" TO ABORT-MESSAGE
         PERFORM ABORT-SERVER
     END-IF

     CALL 'setsockopt' USING
		 BY VALUE CLIENT-DESC
		 BY VALUE SOL_SOCKET
		 BY VALUE SO_REUSEADDR
		 BY REFERENCE YES
		 BY VALUE LENGTH(YES)
     END-CALL
     IF RETURN-CODE IS EQUAL -1 THEN
		 MOVE "Server call 'setsockopt' failed" TO ABORT-MESSAGE
         PERFORM ABORT-SERVER
     END-IF

     PERFORM READ-SOCKET

     DISPLAY BUFFER(1:BUFFER-LENGTH)

     CALL "HTTP-REQUEST-PARSER" USING
		 BY CONTENT BUFFER
		 BY CONTENT BUFFER-LENGTH
		 BY REFERENCE REQUEST
     END-CALL

     DISPLAY "PATH REQUESTED: >" REQUEST-PATH(1:REQUEST-PATH-LENGTH) "<"

	 END-PERFORM.	
	 DISPLAY "RUNNING".
   STOP RUN.

READ-SOCKET.
    MOVE SPACES TO BUFFER.
    CALL "recv" USING
	    BY VALUE CLIENT-DESC
	    BY REFERENCE BUFFER
	    BY VALUE LENGTH(BUFFER)
	    BY VALUE 0
	END-CALL.
     EVALUATE RETURN-CODE
         WHEN -1
             CALL "errnomessage" USING
		      	 BY REFERENCE ERRNO ERRNO-NAME ERRNO-MESSAGE
  	         END-CALL
         WHEN 0
             DISPLAY "Server received closed connection from client"
		     MOVE 0 TO BUFFER-LENGTH
		 WHEN OTHER
             COMPUTE BUFFER-LENGTH = RETURN-CODE
	END-EVALUATE.

ABORT-SERVER.
    DISPLAY ABORT-MESSAGE.
	CALL 'errnomessage' USING
     BY REFERENCE ERRNO ERRNO-NAME ERRNO-MESSAGE
	END-CALL.
	DISPLAY ERRNO SPACE ERRNO-NAME ERRNO-MESSAGE.
	STOP RUN.

END PROGRAM HTTP-SERVER.
